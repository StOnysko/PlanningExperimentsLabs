namespace PlanningExperimentsLabs.rgr._1;

using System;
using System.Diagnostics;

public static class RgrOne
    {
        public static void Start()
        {
            const int recordCount = 100000; // –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
            const string sortBy = "genre";   // "genre", "artist", –∞–±–æ "title"

            Console.WriteLine($"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è {recordCount} –º—É–∑–∏—á–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤...");
            var musicList = MusicGenerator.Generate(recordCount);

            // –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            Console.WriteLine($"\nüîπ –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ {sortBy}...");
            var stopwatch = Stopwatch.StartNew();
            var sequentialSorted = SequentialSorter.Sort(musicList, sortBy);
            stopwatch.Stop();
            Console.WriteLine($"–ß–∞—Å: {stopwatch.ElapsedMilliseconds} –º—Å");

            // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            Console.WriteLine($"\nüîπ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ {sortBy}...");
            stopwatch.Restart();
            var parallelSorted = ParallelSorter.Sort(musicList, sortBy);
            stopwatch.Stop();
            Console.WriteLine($"–ß–∞—Å: {stopwatch.ElapsedMilliseconds} –º—Å");

            Console.WriteLine("\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.");
        }
    }

